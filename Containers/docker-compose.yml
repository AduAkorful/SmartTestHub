version: '3.8'

services:
  evm:
    build:
      context: ./evm
      dockerfile: Dockerfile
    container_name: evm-container
    working_dir: /app
    volumes:
      - shared_input:/app/input
      - shared_logs_evm:/app/logs
      - evm_node_modules:/app/node_modules
    tty: true
    stdin_open: true
    restart: unless-stopped
    environment:
      - NODE_ENV=development
      - COINMARKETCAP_API_KEY=${COINMARKETCAP_API_KEY:-}
      - ALCHEMY_API_KEY=${ALCHEMY_API_KEY:-}
      - ETHERSCAN_API_KEY=${ETHERSCAN_API_KEY:-}
      - REPORT_GAS=true
      # Fix for Slither
      - SOLC_VERSION=0.8.18
      - PATH=/usr/local/bin:/usr/bin:/bin:/app/node_modules/.bin
    env_file:
      - .env
    networks:
      - smarthub-network
    # Install missing dependencies
    command: >
      bash -c "
        # Install missing Hardhat plugins
        npm install --save-dev hardhat-contract-sizer hardhat-gas-reporter solidity-coverage @nomicfoundation/hardhat-toolbox &&
        # Install solc for Slither
        apt-get update && apt-get install -y python3-pip &&
        pip3 install solc-select && solc-select install 0.8.18 && solc-select use 0.8.18 &&
        # Watch for files
        echo 'âœ… EVM container ready with all dependencies installed' &&
        node /app/index.js
      "
    healthcheck:
      test: ["CMD", "ls", "/app/node_modules/hardhat-contract-sizer"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  non-evm:
    build:
      context: ./non-evm
      dockerfile: Dockerfile
    container_name: non-evm-container
    working_dir: /app
    volumes:
      - shared_input:/app/input
      - shared_logs_non_evm:/app/logs
      - ./non-evm/entrypoint.sh:/app/entrypoint.sh
      - ./non-evm/entrypoint-patch.sh:/app/entrypoint-patch.sh
      - rust_cargo_registry:/usr/local/cargo/registry
    command: >
      bash -c "
        # Fix entrypoint permissions
        chmod +x /app/entrypoint-patch.sh &&
        /app/entrypoint-patch.sh &&
        
        # Install missing Solana tools
        apt-get update && apt-get install -y curl &&
        curl -sSfL https://release.solana.com/v1.17.3/install | sh &&
        export PATH=\$PATH:/root/.local/share/solana/install/active_release/bin &&
        
        # Fix tarpaulin config
        echo '[target.\"*\"]
        runner = \"\"
        
        [features]
        fail-on-warnings = false
        
        [output_dir]
        dir = \"logs/coverage\"
        ' > /app/tarpaulin.toml &&
        
        # Start the service
        /app/entrypoint-wrapper.sh
      "
    tty: true
    stdin_open: true
    restart: unless-stopped
    environment:
      - RUST_LOG=debug
      - SOLANA_URL=https://api.devnet.solana.com
      - AWS_XRAY_SDK_ENABLED=false
      - CARGO_HOME=/usr/local/cargo
    env_file:
      - .env
    networks:
      - smarthub-network

  # File input service that makes the shared directory accessible to your backend
  file-input:
    image: alpine:latest
    container_name: file-input-service
    volumes:
      - shared_input:/data/input
    command: >
      sh -c "
        mkdir -p /data/input &&
        chmod -R 777 /data/input &&
        echo 'Input directory ready at /data/input' &&
        # Keep container running
        tail -f /dev/null
      "
    restart: unless-stopped
    networks:
      - smarthub-network

  # Permissions handler service - runs once to set up permissions
  permissions:
    image: alpine:latest
    volumes:
      - shared_input:/data/input
      - shared_logs_evm:/data/logs/evm
      - shared_logs_non_evm:/data/logs/non-evm
    command: >
      sh -c "
        mkdir -p /data/input /data/logs/evm /data/logs/non-evm &&
        chmod -R 777 /data/input /data/logs/evm /data/logs/non-evm &&
        echo 'All permissions set correctly' &&
        echo 'Input directory: /data/input' &&
        echo 'EVM logs directory: /data/logs/evm' &&
        echo 'Non-EVM logs directory: /data/logs/non-evm'
      "
    restart: "no"
    networks:
      - smarthub-network

volumes:
  shared_input:  # Docker-managed volume for input files
  shared_logs_evm:  # Docker-managed volume for EVM logs
  shared_logs_non_evm:  # Docker-managed volume for non-EVM logs
  evm_node_modules:  # Persistent volume for npm packages
  rust_cargo_registry:  # Persistent volume for Rust packages

networks:
  smarthub-network:
    driver: bridge
