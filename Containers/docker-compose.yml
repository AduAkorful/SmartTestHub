version: '3.8'

services:
  evm:
    build:
      context: ./evm
      dockerfile: Dockerfile
    container_name: evm-container
    working_dir: /app
    volumes:
      - shared_input:/app/input
      - shared_logs_evm:/app/logs
      - evm_node_modules:/app/node_modules
    tty: true
    stdin_open: true
    restart: unless-stopped
    environment:
      - NODE_ENV=development
      - COINMARKETCAP_API_KEY=${COINMARKETCAP_API_KEY:-}
      - ALCHEMY_API_KEY=${ALCHEMY_API_KEY:-}
      - ETHERSCAN_API_KEY=${ETHERSCAN_API_KEY:-}
      - REPORT_GAS=true
      - SOLC_VERSION=0.8.18
    entrypoint: >
      sh -c "
        # Install missing dependencies
        npm install --save-dev hardhat-contract-sizer hardhat-gas-reporter@1.0.9 solidity-coverage@0.8.4 &&
        
        # Patch hardhat config to recognize new plugins
        sed -i 's/require(\"@nomicfoundation\/hardhat-toolbox\")/require(\"@nomicfoundation\/hardhat-toolbox\")\nrequire(\"hardhat-contract-sizer\")\nrequire(\"hardhat-gas-reporter\")/' hardhat.config.js &&
        
        # Patch coverage command to remove network flag
        sed -i 's/--network [a-zA-Z0-9]\\+//g' /app/scripts/run-coverage.sh &&
        
        # Fix slither by installing solc
        npm install -g solc@0.8.18 && 
        ln -sf /app/node_modules/.bin/solcjs /usr/local/bin/solc &&
        
        # Start the normal entrypoint
        node /app/index.js
      "
    networks:
      - smarthub-network

  non-evm:
    build:
      context: ./non-evm
      dockerfile: Dockerfile
    container_name: non-evm-container
    working_dir: /app
    volumes:
      - shared_input:/app/input
      - shared_logs_non_evm:/app/logs
      - ./non-evm/entrypoint.sh:/app/entrypoint.sh
      - ./non-evm/entrypoint-patch.sh:/app/entrypoint-patch.sh
      - rust_cargo_registry:/usr/local/cargo/registry
    entrypoint: >
      sh -c "
        # Fix entrypoint permissions
        chmod +x /app/entrypoint-patch.sh &&
        /app/entrypoint-patch.sh &&
        
        # Create proper tarpaulin config
        echo '[features]
        fail-on-warnings = false

        [output_dir]
        dir = \"logs/coverage\"
        ' > /app/tarpaulin.toml &&
        
        # Patch the tarpaulin command to use --config instead of --config-path
        sed -i 's/--config-path tarpaulin.toml/--config tarpaulin.toml/g' /app/scripts/*.sh &&
        
        # Handle missing build-sbf command
        sed -i 's/cargo build-sbf/echo \"Skipping build-sbf command\"/g' /app/scripts/*.sh &&
        
        # Start the service
        /app/entrypoint-wrapper.sh
      "
    tty: true
    stdin_open: true
    restart: unless-stopped
    environment:
      - RUST_LOG=debug
      - SOLANA_URL=https://api.devnet.solana.com
      - AWS_XRAY_SDK_ENABLED=false
      - CARGO_HOME=/usr/local/cargo
    env_file:
      - .env
    networks:
      - smarthub-network

  # File input service that makes the shared directory accessible to your backend
  file-input:
    image: alpine:latest
    container_name: file-input-service
    volumes:
      - shared_input:/data/input
    command: >
      sh -c "
        mkdir -p /data/input &&
        chmod -R 777 /data/input &&
        echo 'Input directory ready at /data/input' &&
        # Keep container running
        tail -f /dev/null
      "
    restart: unless-stopped
    networks:
      - smarthub-network

  # Permissions handler service - runs once to set up permissions
  permissions:
    image: alpine:latest
    volumes:
      - shared_input:/data/input
      - shared_logs_evm:/data/logs/evm
      - shared_logs_non_evm:/data/logs/non-evm
    command: >
      sh -c "
        mkdir -p /data/input /data/logs/evm /data/logs/non-evm &&
        chmod -R 777 /data/input /data/logs/evm /data/logs/non-evm &&
        echo 'All permissions set correctly' &&
        echo 'Input directory: /data/input' &&
        echo 'EVM logs directory: /data/logs/evm' &&
        echo 'Non-EVM logs directory: /data/logs/non-evm'
      "
    restart: "no"
    networks:
      - smarthub-network

volumes:
  shared_input:  # Docker-managed volume for input files
  shared_logs_evm:  # Docker-managed volume for EVM logs
  shared_logs_non_evm:  # Docker-managed volume for non-EVM logs
  evm_node_modules:  # Persistent volume for npm packages
  rust_cargo_registry:  # Persistent volume for Rust packages

networks:
  smarthub-network:
    driver: bridge
