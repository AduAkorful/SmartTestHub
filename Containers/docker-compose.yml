services:
  evm:
    build:
      context: ./evm
      dockerfile: Dockerfile
    container_name: evm-container
    working_dir: /app
    volumes:
      - shared_input:/app/input
      - shared_logs_evm:/app/logs
    tty: true
    stdin_open: true
    restart: unless-stopped
    environment:
      - NODE_ENV=development
      - COINMARKETCAP_API_KEY=${COINMARKETCAP_API_KEY:-}
      - ALCHEMY_API_KEY=${ALCHEMY_API_KEY:-}
      - ETHERSCAN_API_KEY=${ETHERSCAN_API_KEY:-}
      - REPORT_GAS=true
    env_file:
      - .env
    networks:
      - smarthub-network

  solana-validator:
    image: solanalabs/solana:v1.16.15
    container_name: solana-validator
    command: >
      solana-test-validator --reset --no-bpf-jit --no-poh-speed-test --quiet
    ports:
      - "8899:8899"
      - "8900:8900"
    volumes:
      - validator_ledger:/root/.local/share/solana
    restart: unless-stopped
    networks:
      - smarthub-network

  non-evm:
    build:
      context: ./non-evm
      dockerfile: Dockerfile
    container_name: non-evm-container
    working_dir: /app
    volumes:
      - shared_input:/app/input
      - shared_logs_non_evm:/app/logs
      - target_cache:/app/target
      - sccache_cache:/app/.cache/sccache
    tty: true
    stdin_open: true
    restart: unless-stopped
    environment:
      - RUST_LOG=debug
      - SOLANA_URL=http://solana-validator:8899
      - AWS_XRAY_SDK_ENABLED=false
      - CARGO_BUILD_JOBS=4
      - RUSTFLAGS=-C target-cpu=native
      - RUSTC_WRAPPER=sccache
      - CARGO_TARGET_DIR=/app/target
    env_file:
      - .env
    depends_on:
      - solana-validator
    networks:
      - smarthub-network

  non-evm-algorand:
    build:
      context: ./non-evm-algorand
      dockerfile: Dockerfile
    container_name: non-evm-algorand-container
    working_dir: /app
    volumes:
      - shared_input:/app/input
      - shared_logs_non_evm:/app/logs
    tty: true
    stdin_open: true
    restart: unless-stopped
    environment:
      - PYTHONUNBUFFERED=1
    env_file:
      - .env
    networks:
      - smarthub-network

  non-evm-starknet:
    build:
      context: ./non-evm-starknet
      dockerfile: Dockerfile
    container_name: non-evm-starknet-container
    working_dir: /app
    volumes:
      - shared_input:/app/input
      - shared_logs_non_evm:/app/logs
    tty: true
    stdin_open: true
    restart: unless-stopped
    environment:
      - PYTHONUNBUFFERED=1
    env_file:
      - .env
    networks:
      - smarthub-network
    depends_on:
      - starknet-devnet

  starknet-devnet:
    image: shardlabs/starknet-devnet-rs:latest
    container_name: starknet-devnet
    ports:
      - "5050:5050"
    restart: unless-stopped
    networks:
      - smarthub-network

  file-input:
    image: busybox
    container_name: file-input-service
    volumes:
      - shared_input:/data/input
    command: >
      sh -c "
        chmod -R 777 /data/input &&
        mkdir -p /data/input &&
        chmod -R 777 /data/input &&
        echo 'Input directory ready at /data/input' &&
        tail -f /dev/null
      "
    restart: unless-stopped
    networks:
      - smarthub-network

  permissions:
    image: busybox
    volumes:
      - shared_input:/data/input
      - shared_logs_evm:/data/logs/evm
      - shared_logs_non_evm:/data/logs/non-evm
    command: >
      sh -c "
        mkdir -p /data/input /data/logs/evm /data/logs/non-evm &&
        chmod -R 777 /data/input /data/logs/evm /data/logs/non-evm &&
        echo 'All permissions set correctly' &&
        echo 'Input directory: /data/input' &&
        echo 'EVM logs directory: /data/logs/evm' &&
        echo 'Non-EVM logs directory: /data/logs/non-evm'
      "
    restart: "no"
    networks:
      - smarthub-network

volumes:
  shared_input:
  shared_logs_evm:
  shared_logs_non_evm:
  target_cache:
  sccache_cache:
  validator_ledger:

networks:
  smarthub-network:
    driver: bridge
